// @description V<T> -> V<pair<T, count>>

template <class T>
auto v2pti(const std::vector<T> &v) {
	std::vector<std::pair<T, int>> r;
	if (v.empty())
		return r;
	r.emplace_back(v[0], 1);
	for (int i = 1; i < v.size(); i++) {
		if (v[i] == v[i - 1])
			r.back().second++;
		else
		 	r.emplace_back(v[i], 1);
	}
	return r;
}

// @description 线性筛(LPF)

std::vector<int> lpf, primes;
void Euler(int n) {
	lpf.resize(n + 1);
	for (int i = 2; i <= n; i++) {
		if (!lpf[i])
			lpf[i] = i, primes.push_back(i);
		for (auto pj : primes) {
			if (pj > n / i)
				break;
			lpf[i * pj] = pj;
			if (i % pj == 0)
				break;
		}
	}
}

// @description 质因子分解

auto factor(ll n) {
	std::vector<ll> ret;
	for (; n > 1; n /= lpf[n])
		ret.push_back(lpf[n]);
	return ret;
}