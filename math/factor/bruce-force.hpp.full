// @description V<T> -> V<pair<T, count>>

template <class T>
auto v2pti(const V<T> &v) {
	V<std::pair<T, int>> r;
	if (v.empty())
		return r;
	r.emplace_back(v[0], 1);
	for (int i = 1; i < v.size(); i++) {
		if (v[i] == v[i - 1])
			r.back().second++;
		else
		 	r.emplace_back(v[i], 1);
	}
	return r;
}

// @description 因式分解

auto factor(ll n) {
	V<ll> ret;
	for (int i = 2; 1ll * i * i <= n; i++) {
		for (; n % i == 0; n /= i)
			ret.push_back(i);
	}
	if (n > 1)
		ret.push_back(n);
	return ret;
}