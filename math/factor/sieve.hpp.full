// @description V<T> -> V<pair<T, count>>

template <class T>
auto v2pti(const std::vector<T> &v) {
	std::vector<std::pair<T, int>> r;
	if (v.empty())
		return r;
	r.emplace_back(v[0], 1);
	for (int i = 1; i < v.size(); i++) {
		if (v[i] == v[i - 1])
			r.back().second++;
		else
		 	r.emplace_back(v[i], 1);
	}
	return r;
}

// @description 线性筛

std::vector<bool> isp;
std::vector<int> primes;
void Euler(int n) {
	isp.resize(n + 1, true);
	for (int i = 2; i <= n; i++) {
		if (isp[i])
			primes.push_back(i);
		for (int pj : primes) {
			if (pj > n / i)
				break;
			isp[i * pj] = false;
			if (i % pj == 0)
				break;
		}
	}
}

// @description 质因子分解

auto factor(ll n) {
	std::vector<ll> ans;
	for (int i : primes) {
		if (1ll * i * i > n)
			break;
		for (; n % i == 0; n /= i)
			ans.push_back(i);
	}
	if (n > 1)
		ans.push_back(n);
	return ans;
}