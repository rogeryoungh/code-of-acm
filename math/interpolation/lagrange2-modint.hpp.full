const int P = 998244353;

// @description 快速幂(i32, P)

int qpow(int a, ll b = P - 2, int m = P) {
	int ret = 1 % m;
	for (; b > 0; b /= 2) {
		if (b % 2 == 1)
			ret = 1ll * ret * a % m;
		a = 1ll * a * a % m;
	}
	return ret;
}

// @description 取模整数

// clang-format off
#define OPERATOR(U, V, op)	\
friend inline U operator op(const U &l, const V &r) {	\
	return U(l) op##= r;	\
}
// clang-format on

struct Z {
	int v;
	Z(ll a = 0) : v((a % P + P) % P) {}
	Z &operator=(const int &m) {
		v = m;
		return *this;
	}
	Z &operator+=(const Z &m) {
		v = (v += m.v) >= P ? v - P : v;
		return *this;
	}
	Z &operator-=(const Z &m) {
		v = (v -= m.v) < 0 ? v + P : v;
		return *this;
	}
	Z &operator*=(const Z &m) {
		v = 1ll * v * m.v % P;
		return *this;
	}
	OPERATOR(Z, Z, +);
	OPERATOR(Z, Z, -);
	OPERATOR(Z, Z, *);
	Z pow(int n) const {
		return qpow(v, n);
	}
	Z inv() const {
		return pow(P - 2);
	}
	// useless
	Z operator-() const {
		return v == 0 ? 0 : P - v;
	}
	Z &operator/=(const Z &m) {
		return *this *= m.inv();
	}
	OPERATOR(Z, Z, /);
	auto approx(int A = 1E3) {
		int x = v, y = P, a = 1, b = 0;
		while (x > A) {
			std::swap(x, y), std::swap(a, b);
			a -= x / y * b, x %= y;
		}
		return std::make_pair(x, a);
	}
};

std::istream &operator>>(std::istream &is, Z &z) {
	return is >> z.v;
}

std::ostream &operator<<(std::ostream &os, const Z &z) {
	return os << z.v;
}

// @description 拉格朗日插值

auto lagrange(const V<Z> &x, const V<Z> &y) {
	int n = x.size();
	V<Z> d(n), u(n + 1), t(n);
	u[0] = 1;
	for (int i = 0; i < n; i++) {
		for (int j = i + 1; j >= 1; j--)
			u[j] = u[j - 1] - u[j] * x[i];
		u[0] *= -x[i];
	}
	for (int i = 0; i < n; i++) {
		Z s2 = 1;
		for (int j = n; j >= 1; j--) {
			t[j - 1] = j == n ? u[n] : u[j] + x[i] * t[j];
			if (j - 1 != i)
				s2 = s2 * (x[i] - x[j - 1]);
		}
		s2 = s2.inv();
		for (int j = 0; j < n; j++)
			d[j] += t[j] * s2 * y[i];
	}
	return d;
}