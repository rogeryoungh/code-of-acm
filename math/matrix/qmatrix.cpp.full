// @description 二维数组

template <class T>
struct VV {
	int x, y;
	V<T> m;
	VV(int a, int b, const T &v = T()) : x(a), y(b), m(a * b, v) {}
	auto operator[](int i) {
		return m.begin() + i * y;
	}
	auto operator[](int i) const {
		return m.begin() + i * y;
	}
};

// @description 矩阵乘法

template <class T>
VV<T> operator*(const VV<T> &lhs, const VV<T> &rhs) {
	assert(lhs.y == rhs.x);
	VV<T> u(lhs.x, rhs.y);
	for (int i = 0; i < lhs.x; i++) {
		for (int k = 0; k < rhs.x; k++) {
			T t = lhs[i][k];
			for (int j = 0; j < rhs.y; j++)
				u[i][j] += rhs[k][j] * t;
		}
	}
	return u;
}

template <class T>
std::istream &operator>>(std::istream &is, VV<T> &m) {
	for (int i = 0; i < m.x * m.y; i++)
		is >> m.m[i];
	return is;
}

template <class T>
std::ostream &operator<<(std::ostream &os, const VV<T> &m) {
	for (int i = 0; i < m.x * m.y; i++)
		os << m.m[i] << " \n"[(i + 1) % m.y == 0];
	return os;
}

// @description 矩阵快速幂

template <class T>
auto make_matrix_E(int n) {
	VV<T> ret(n, n);
	for (int i = 0; i < n; i++)
		ret[i][i] = 1;
	return ret;
}

template <class T>
auto matrix_pow(VV<T> a, ll w) {
	auto ret = make_matrix_E<T>(a.x);
	for (; w > 0; w /= 2) {
		if (w % 2 == 1)
			ret = a * ret;
		a = a * a;
	}
	return ret;
}