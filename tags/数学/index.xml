<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>数学 on Roger Young</title><link>https://rogeryoungh.github.io/code-of-acm/tags/%E6%95%B0%E5%AD%A6/</link><description>Recent content in 数学 on Roger Young</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>© 2021 [Roger Young](/code-of-acm)</copyright><lastBuildDate>Wed, 23 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://rogeryoungh.github.io/code-of-acm/tags/%E6%95%B0%E5%AD%A6/index.xml" rel="self" type="application/rss+xml"/><item><title>P1042 乒乓球</title><link>https://rogeryoungh.github.io/code-of-acm/post/2020-09/p1042/</link><pubDate>Wed, 23 Sep 2020 00:00:00 +0000</pubDate><guid>https://rogeryoungh.github.io/code-of-acm/post/2020-09/p1042/</guid><description>题目大意 赢 11 分并且压对手两分以上则一局结束，否则要追分至压对手两分。
给定 $\texttt{WL}$ 序列，分别求 11 分制和 21 分制下每场比分，$\texttt{E}$ 是结束符。
分析 这是一道比较烦的模拟题，很绕。
char ch[62510]; int solve(int win, int len) { int w = 0, l = 0; _fora (i, 0, len-1) { w += ch[i] == &amp;#39;W&amp;#39;; l += ch[i] == &amp;#39;L&amp;#39;; if (max(w, l) &amp;gt;= win &amp;amp;&amp;amp;abs(w - l) &amp;gt;= 2) { printf(&amp;#34;%d:%d\n&amp;#34;, w, l); w = l = 0; } } printf(&amp;#34;%d:%d\n&amp;#34;, w, l); } int main() { char ccc; int len = 0; while(scanf(&amp;#34;%c&amp;#34;, &amp;amp;ccc) !</description></item><item><title>P2181 对角线</title><link>https://rogeryoungh.github.io/code-of-acm/post/2020-09/p2181/</link><pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate><guid>https://rogeryoungh.github.io/code-of-acm/post/2020-09/p2181/</guid><description>题目大意 凸 $n$ 边形中，任意三条对角线不共点，求所有对角线交点的个数。
分析 注意到一个交点对应凸多边形 $4$ 个定点，于是等价于 $n$ 个点任选 $4$ 个点的选法种数，即
$$ \binom{n}{4} = \frac{n(n-1)(n-2)(n-3)}{24} $$ 注意爆 long long，需要写成 n * (n-1) / 2 * (n-2) / 3 * (n-3) / 4。
int main() { unsigned long long n; scanf(&amp;#34;%llu&amp;#34;, &amp;amp;n); n = n * (n - 1) / 2 * (n - 2) / 3 * (n - 3) / 4; printf(&amp;#34;%llu&amp;#34;, n); return 0; }</description></item></channel></rss>