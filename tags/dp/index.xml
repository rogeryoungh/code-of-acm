<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>DP on Roger Young</title><link>https://rogeryoungh.github.io/code-of-acm/tags/dp/</link><description>Recent content in DP on Roger Young</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>© 2021 [Roger Young](/code-of-acm)</copyright><lastBuildDate>Mon, 30 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://rogeryoungh.github.io/code-of-acm/tags/dp/index.xml" rel="self" type="application/rss+xml"/><item><title>P1880 石子合并</title><link>https://rogeryoungh.github.io/code-of-acm/post/2020-11/p1880/</link><pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate><guid>https://rogeryoungh.github.io/code-of-acm/post/2020-11/p1880/</guid><description>题目大意 环形队列上有 $n$ 堆石子，可以把相邻的两堆合成一堆，每次合并的得分是新一堆的石子数。
求最终分数的最小值和最大值。
分析 考虑 $dp(i,j)$ 是将区间 $[i,j]$ 的石子全部合并的最大值。于是状态转移方程为
$$ dp(i,j) = \max_{i \leqslant k \leqslant j}(dp(i,k) + dp(k+1,j) + s(i,j)) $$ 其中 $s(i,j)$ 是 $[i,j]$ 中所有石子数。
然而不能通过先 $i$ 再 $j$ 再 $k$ 的循环来递推，运算顺序值得注意。
细节：前缀和、循环开两倍。
int dmax[205][205], dmin[205][205]; int f[205], s[205]; int main() { int n = rr(); _fora (i, 1, n) f[i + n] = f[i] = rr(); _fora (i, 1, n * 2) s[i] = s[i - 1] + f[i]; _fora (len, 2, n) { _fora (i, 1, 2 * n - len + 1) { int j = i + len - 1; int mmax = 0, mmin = 0x3f3f3f3f; int ss = s[j] - s[i - 1]; _fora (k, i, j - 1) { mmax = max(mmax, dmax[i][k] + dmax[k + 1][j] + ss); mmin = min(mmin, dmin[i][k] + dmin[k + 1][j] + ss); } dmax[i][j] = mmax; dmin[i][j] = mmin; } } int rst = 0x3f3f3f3f; _fora (p, 0, n - 1) rst = min(rst, dmin[p + 1][p + n]); printf(&amp;#34;%d\n&amp;#34;, rst); rst = 0; _fora (p, 0, n - 1) rst = max(rst, dmax[p + 1][p + n]); printf(&amp;#34;%d\n&amp;#34;, rst); return 0; }</description></item><item><title>P1077 摆花</title><link>https://rogeryoungh.github.io/code-of-acm/post/2020-10/p1077/</link><pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate><guid>https://rogeryoungh.github.io/code-of-acm/post/2020-10/p1077/</guid><description>题目大意 要从 $n$ 种花中挑出 $m$ 盆展览，其中第 $i$ 种花不得多于 $a_i$ 种。求有几种选法。
分析 考虑动态规划，记状态 $dp[i,j]$ 为摆完前 $i$ 种花，共 $j$ 盆时的方案数。容易得到递推式
$$ dp[i,j] = \sum_{k = j - \min(a_i, j)}^j dp[i-1,k] $$ 边界条件是 $dp[0,0] = 1$。可以用滚动数组、前缀和优化。
const ll mod = 1e6 + 7; ll dp[110], aa[110], sum[110]; int main() { ll n = rr(), m = rr(); sum[0] = dp[0] = 1; _fora (i, 1, n) aa[i] = rr(); _fora (i, 1, n) { _fora (j, 1, m) sum[j] = (sum[j - 1] + dp[j]) % mod; _forz (j, m, 0) { int t = j - 1 - min(aa[i], j); if (t &amp;gt; 0) dp[j] = (dp[j] + sum[j - 1] - sum[t]) % mod; } } printf(&amp;#34;%lld\n&amp;#34;, (dp[m] + mod) % mod); return 0; }</description></item><item><title>P1990 覆盖墙壁</title><link>https://rogeryoungh.github.io/code-of-acm/post/2020-10/p1990/</link><pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate><guid>https://rogeryoungh.github.io/code-of-acm/post/2020-10/p1990/</guid><description>题目大意 有 I 形和 L 形两种砖头，分别能覆盖 2 个单元和 3 个单元。求 $2 \times n$ 的墙有多少不重复的覆盖方式，结果对 $10^4$ 取模。
分析 其中 I 形砖块仅有横放和竖放两种。关键在于 L 形，两个 L 形之间可以用 I 形填充，这让情况变得复杂起来。
对于 $F_n$ 的递推，我们可以想到
在 $F_{n-1}$ 后放一个 I 形砖块。 在 $F_{n-2}$ 后放两个横着的 I 形砖块。 对于更前面的递推，较为复杂。 两个 L 形砖块对齐，上下翻转也可以，即 $2 F_{n-3}$。 两个 L 形砖块可以对顶放，空缺恰用一个 I 填充，即 $2 F_{n-4}$。 类似 $2F_{n-3}$，中间可以再插入两个 I 形，即 $2 F_{n-5}$。 …… 直到 I 形和 L 形砖块恰好铺满墙壁，即 $2F_{0}$。 容易得到我们的递推式</description></item><item><title>P1004 方格取数</title><link>https://rogeryoungh.github.io/code-of-acm/post/2020-09/p1004/</link><pubDate>Sun, 20 Sep 2020 00:00:00 +0000</pubDate><guid>https://rogeryoungh.github.io/code-of-acm/post/2020-09/p1004/</guid><description>题目大意 在 $n \times n$ 的方格（$n \leqslant 9$）中存在一些正整数，经过格子时获得格子上的数，但只能获得一次。
某人只能向右或向下走，从格子的左上角走到到右下角，共走两次，求最大能取得的数字。
分析 考虑把先走后走转化为两个人同时走，只需要处理遇到两次的值即可。
考虑四维 DP，用 $dp[x_1,y_1,x_2,y_2]$ 表示第一个人走到 $(x_1,y_1)$ 和第二个人走到 $(x_2,y_2)$。
再考虑转移，每一个位置仅可能从其左面或上面转移来，于是可以写出（$x_1 \ne y_1$ 或 $x_2 \ne y_2$ 时）
$$ dp[x_1,y_1,x_2,y_2] = \max\left\{ \begin{matrix} dp[x_1-1,y_1,x_2-1,y_2] \\ dp[x_1,y_1-1,x_2-1,y_2] \\ dp[x_1-1,y_1,x_2,y_2-1] \\ dp[x_1,y_1-1,x_2,y_2-1] \end{matrix}\right\} + a[x_1,y_1] + a[x_2,y_2] $$ 当 $x_1=y_1,x_2=y_2$ 时，只加一次即可。到这里 $O(n^4)$ 其实已经可以过题了，但还可以优化。
注意到一些状态是不可达的，因为 $x_1+y_1 = x_2+y_2$，因此存在 $O(n^3)$ 的 DP。
考虑当前已走长度 $h=x_1+y_1=x_2+y_2$，于是可以把两个人的座标表示为 $(x_1,h-x_1)$ 和 $(x_2,h-x_2)$。
于是记状态为 $dp[h,x_1,x_2]$，当 $x_1 \ne x_2$ 时有
$$ dp[h,x_1,x_2] = \max\left\{ \begin{matrix} dp[h-1,x_1,x_2] \\ dp[h-1,x_1,x_2-1] \\ dp[h-1,x_1-1,x_2] \\ dp[h-1,x_1-1,x_2-1] \end{matrix}\right\} + a[x_1,h-x_1] + a[x_2,h-x_2] $$ 再注意到可以使用滚动数组，因此有</description></item></channel></rss>